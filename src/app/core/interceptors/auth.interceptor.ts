import { Injectable } from '@angular/core';
import {
  HttpEvent,
  HttpHandler,
  HttpInterceptor,
  HttpRequest
} from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = localStorage.getItem('accessToken');

    const publicApiRoutes = [
      '/api/v1/authentication/sign-up',
      '/api/v1/authentication/sign-in'
    ];

    // --- INICIO DE LA CORRECCI√ìN ---
    // Verificamos si la URL es una llamada a la API o un recurso local (como /assets)
    const isApiRoute = req.url.startsWith('http');

    // Solo intentamos extraer el path si es una ruta de la API
    const path = isApiRoute ? new URL(req.url).pathname : req.url;

    // Una ruta es p√∫blica si es una ruta de la API y est√° en nuestra lista de rutas p√∫blicas.
    const isPublicRoute = publicApiRoutes.includes(path);
    // --- FIN DE LA CORRECCI√ìN ---


    // Tus logs siguen siendo √∫tiles para depurar
    console.log('üåê Interceptando:', path);
    console.log('üîê Es ruta de API p√∫blica:', isPublicRoute);
    console.log('üé´ Token disponible:', !!token);


    // La l√≥gica para a√±adir el token ahora solo aplica a rutas de API no p√∫blicas
    if (isApiRoute && !isPublicRoute && token) {
      const authReq = req.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
      console.log('‚úÖ Token agregado a la petici√≥n de API');
      return next.handle(authReq);
    }

    // Para las rutas p√∫blicas y las peticiones locales (traducciones), la petici√≥n pasa sin modificarse.
    console.log('üö´ Petici√≥n local o p√∫blica, se env√≠a sin token.');
    return next.handle(req);
  }
}
